package com.study.toyproject.service;

import java.util.Date;
import java.util.UUID;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.study.toyproject.domain.user.User;
import com.study.toyproject.domain.user.UserRepository;
import com.study.toyproject.handler.ex.CustomException;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Service
public class AuthService {

	private final JavaMailSender javaMailSender;
	private final BCryptPasswordEncoder bCryptPasswordEncoder;
	private final UserRepository userRepository;

	@Transactional
	public User signUp(User user) {

		String rawPassword = user.getPassword();
		String encPassword = bCryptPasswordEncoder.encode(rawPassword);
		user.setPassword(encPassword);
		user.setRole("ROLE_USER");

		System.out.println("서비스");

		User userEntity = userRepository.save(user);

		return userEntity;

	}

	@Transactional
	public User userUpdate(int userId, User user) {

		User userUpdate = userRepository.findById(userId).orElseThrow(() -> {
			return new CustomException("회원 ID를 찾을 수 없습니다.");
		});

		String rawPassword = user.getPassword();
		String encPassword = bCryptPasswordEncoder.encode(rawPassword);

		userUpdate.setPassword(encPassword);
		userUpdate.setName(user.getName());
		userUpdate.setEmail(user.getEmail());

		return userUpdate;

	}

	public Boolean checkUsername(String username) {

		return userRepository.existsByUsername(username);
	}

	
	public User findUsername(String email) {

		return userRepository.mfindByEmail(email);

	}

	@Transactional
	public User findPassword(String username, String email) throws MessagingException {

		User userEntity = userRepository.mfindByPassword(username, email);

		if (userEntity != null) {
			
			UUID uid = UUID.randomUUID();
			String password = uid.toString().substring(0, 6);
			
			userEntity.setPassword(password);
			
			MimeMessage message = javaMailSender.createMimeMessage();
			message.setSubject("임시 비밀번호입니다.");
			message.setRecipient(Message.RecipientType.TO, new InternetAddress(userEntity.getEmail()));
			message.setText("<p>안녕하세요.</p>"
					+ "<br>"
					+ "<p>회원님께서 요청하신 임시 비밀번호는 다음과 같습니다.<br>"
					+ password+"<br>"
					+ "임시비밀번호는 발급받는 즉시 다시 로그인 후 변경을 권장드립니다.<br>"
					+ "감사합니다.");
			message.setSentDate(new Date());
			javaMailSender.send(message);
			
			userEntity.setPassword(bCryptPasswordEncoder.encode(userEntity.getPassword()));

			return userEntity;

		} else {
			return null;
		}

	}

}
