package com.study.toyproject.web.api;

import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;

import java.util.HashMap;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.study.toyproject.config.auth.PrincipalDetails;
import com.study.toyproject.domain.user.User;
import com.study.toyproject.service.AuthService;
import com.study.toyproject.web.dto.CMRespDto;
import com.study.toyproject.web.dto.SignUpDto;
import com.study.toyproject.web.dto.UserUpdateDto;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@RestController
public class AuthApiController {

	private final AuthService authService;

	@PutMapping("/api/auth/{userId}/update")
	public ResponseEntity<?> userUpate(@PathVariable int userId, @Valid @RequestBody UserUpdateDto userUpdateDto,
			@AuthenticationPrincipal PrincipalDetails principalDetails) {

		User userEntity = authService.userUpdate(userId, userUpdateDto.toEntity());
		principalDetails.setUser(userEntity);
		
		return new ResponseEntity<>(new CMRespDto<>(1, "회원정보 수정 성공", userEntity), HttpStatus.OK);
	}
	
	@PostMapping("/api/auth/signUp")
	public ResponseEntity<?> signUp(@Valid @RequestBody SignUpDto signUpDto, BindingResult bindingResult, Model model){
		
		if(bindingResult.hasErrors()) {
			Map<String, String> errorMap = new HashMap<>();
			
			for(FieldError error:bindingResult.getFieldErrors()) {
				errorMap.put(error.getField(), error.getDefaultMessage());
			}
			return new ResponseEntity<>(errorMap, HttpStatus.BAD_REQUEST);
		}
		
		User user = signUpDto.toEntity();
		authService.signUp(user);

		return new ResponseEntity<>(HttpStatus.OK);

	}
	
	@PostMapping("/api/auth/{email}")
	public ResponseEntity<?> findUsername(@PathVariable String email, User user) {

		if (authService.findUsername(email) == null) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		} else {
			User userEntity = authService.findUsername(email);
			return new ResponseEntity<>(userEntity.getUsername(), HttpStatus.OK);
		}

	}
	
	@PostMapping("/api/auth/findPassword")
	public ResponseEntity<?> findPassword(@RequestBody UserDTO userDto) {
		
		if(authService.findPassword(user.getUsername(), user.getEmail()) == null) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		} else {
			User userEntity = authService.findPassword(user.getUsername(), user.getEmail());
			return new ResponseEntity<>(userEntity, HttpStatus.OK);
		}
		
	}
	
	@PostMapping("/api/auth/changPassword")
	public ResponseEntity<?> changePassword() {
		
		return null;
	}

}
