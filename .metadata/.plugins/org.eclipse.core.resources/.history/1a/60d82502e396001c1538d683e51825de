package com.study.toyproject.web.api;

import java.util.Map;

import javax.validation.Valid;

import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.study.toyproject.config.auth.PrincipalDetails;
import com.study.toyproject.domain.user.User;
import com.study.toyproject.service.AuthService;
import com.study.toyproject.web.dto.CMRespDto;
import com.study.toyproject.web.dto.SignUpDto;
import com.study.toyproject.web.dto.UserUpdateDto;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@RestController
public class AuthApiController {

	private final AuthService authService;

	@PutMapping("/api/auth/{userId}/update")
	public CMRespDto<?> userUpate(@PathVariable int userId, @Valid @RequestBody UserUpdateDto userUpdateDto,
			Errors errors, @AuthenticationPrincipal PrincipalDetails principalDetails, Model model) {

		if (errors.hasErrors()) {

			model.addAttribute("userUpdateDto", userUpdateDto);

			Map<String, String> validatorResult = authService.validateHandling(errors);

			for (String key : validatorResult.keySet()) {
				model.addAttribute(key, validatorResult.get(key));
			}

			return new CMRespDto<>(1, "회원정보 수정 검증 성공", null);

		}
		
		User userEntity = authService.userUpdate(userId, userUpdateDto.toEntity());
		principalDetails.setUser(userEntity);
		return new CMRespDto<>(1, "회원정보 수정 성공", userEntity);
	}
	
	@PostMapping("/api/auth/signUp")
	public CMRespDto<?> signUp(@Valid @RequestBody SignUpDto signUpDto, Errors errors, Model model) {

		System.out.println("이곳");

		if (errors.hasErrors()) {

			model.addAttribute("signUpDto", signUpDto);

			Map<String, String> validatorResult = authService.validateHandling(errors);

			for (String key : validatorResult.keySet()) {
				model.addAttribute(key, validatorResult.get(key));
			}
			
			ModelAndView mav = new ModelAndView("/auth/signUpForm");

			return new CMRespDto<>(1, "회원가입 검증", mav);

		}
		
		System.out.println("혹시");
		User user = signUpDto.toEntity();
		authService.signUp(user);
		
		return new CMRespDto<User>(1, "회원정보 수정 성공", null);

	}

}
