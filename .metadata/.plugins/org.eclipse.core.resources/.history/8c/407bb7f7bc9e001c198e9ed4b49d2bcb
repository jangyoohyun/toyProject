package com.study.toyproject.service;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.Errors;
import org.springframework.validation.FieldError;

import com.study.toyproject.domain.user.User;
import com.study.toyproject.domain.user.UserRepository;
import com.study.toyproject.handler.ex.CustomException;
import com.study.toyproject.web.dto.UserDto;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Service
public class AuthService {

	private final BCryptPasswordEncoder bCryptPasswordEncoder;
	private final UserRepository userRepository;

	@Transactional
	public User signUp(User user) {

		String rawPassword = user.getPassword();
		String encPassword = bCryptPasswordEncoder.encode(rawPassword);
		user.setPassword(encPassword);
		user.setRole("ROLE_USER");

		System.out.println("서비스");

		User userEntity = userRepository.save(user);

		return userEntity;

	}

	@Transactional
	public User userUpdate(int userId, User user) {

		User userUpdate = userRepository.findById(userId).orElseThrow(() -> {
			return new CustomException("회원 ID를 찾을 수 없습니다.");
		});

		String rawPassword = user.getPassword();
		String encPassword = bCryptPasswordEncoder.encode(rawPassword);

		userUpdate.setPassword(encPassword);
		userUpdate.setName(user.getName());
		userUpdate.setPhone(user.getPhone());
		userUpdate.setEmail(user.getEmail());

		return userUpdate;

	}

	public Boolean checkUsername(String username) {

		return userRepository.existsByUsername(username);
	}

	public Map<String, String> validateHandler(Errors errors) {
		Map<String, String> validatorResult = new HashMap<>();

		for (FieldError error : errors.getFieldErrors()) {
			String validKeyName = String.format("valid_%s", error.getField());
			validatorResult.put(validKeyName, error.getDefaultMessage());
		}

		return validatorResult;
	}

	public User findUsername(String email) {

		return userRepository.mfindByEmail(email);

	}

	public User findPassword(String username, String email) {

		userRepository.mfindByPassword(username, email);
		
		UserDto userEntity = new UserDto();
		System.out.println(userEntity.getUsername());

		/*
		 * UUID uid = UUID.randomUUID(); String password = uid.toString().substring(0,
		 * 6);
		 */

		return null;

	}

}
