package com.study.toyproject.service;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.study.toyproject.config.auth.PrincipalDetails;
import com.study.toyproject.domain.photo.Photo;
import com.study.toyproject.domain.photo.PhotoRepository;
import com.study.toyproject.web.dto.PhotoDto;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Service
public class PhotoService {
	
	private final PhotoRepository photoRepository;
	
	@Value("${file.path}")
	private String uploadFolder;
	
	
	@Transactional
	public void 사진업로드(PhotoDto photoDto, PrincipalDetails principalDetails) {
	
		
		UUID uuid = UUID.randomUUID();
		String photoFileName = uuid+"_"+photoDto.getFile().getOriginalFilename();
		
		Path photoFilePath = Paths.get(uploadFolder+photoFileName);
		
		try {
			Files.write(photoFilePath, photoDto.getFile().getBytes());
		} catch(Exception e) {
			e.printStackTrace();
		}
		
		Photo photo = photoDto.toEntity(photoFileName, principalDetails.getUser());
		photoRepository.save(photo);
		
	}
	
	
	@Transactional
	public Page<Photo> 포토리스트(Pageable pageable) {
		
		return photoRepository.findAll(pageable);
		
	}


	public void 사진수정(int id, PhotoDto photoDto, PrincipalDetails principalDetails) {

		Photo photo = new Photo();
		
		if(Photo photo.getPostImageUrl() != null) {
			new File(uploadFolder + photoFilePath).delete();
			
			UUID uuid = UUID.randomUUID();
			String photoFileName = uuid+"_"+photoDto.getFile().getOriginalFilename();
			
			Path photoFilePath = Paths.get(uploadFolder+photoFileName);
			
			try {
				Files.write(photoFilePath, photoDto.getFile().getBytes());
			} catch(Exception e) {
				e.printStackTrace();
			}
			
		}
		
		photoRepository.save(photo);
		
		Photo photoUpdate = photoRepository.findById(id).orElseThrow(()->{return new IllegalArgumentException("글 수정의 아이디를 찾을 수 없습니다.");});
		photoUpdate.setTitle(photoDto.getTitle());
		photoUpdate.setContent(photoDto.getContent());
		
		
		
		
	}

}
